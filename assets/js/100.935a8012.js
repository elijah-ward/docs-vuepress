(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{210:function(e,t,n){"use strict";n.r(t);var a=n(0),i=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"notification-plugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notification-plugin","aria-hidden":"true"}},[e._v("#")]),e._v(" Notification Plugin")]),e._v(" "),n("p",[e._v("Updated April 18, 2013")]),e._v(" "),n("h2",{attrs:{id:"about"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#about","aria-hidden":"true"}},[e._v("#")]),e._v(" About")]),e._v(" "),n("p",[e._v("Notifications are actions that are performed when a Job starts or finishes.")]),e._v(" "),n("p",[e._v("Currently there are three conditions that can trigger notifications:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("onstart")]),e._v(" - the Job started")]),e._v(" "),n("li",[n("code",[e._v("onsuccess")]),e._v(" - the Job completed without error")]),e._v(" "),n("li",[n("code",[e._v("onfailure")]),e._v(" - the Job failed or was aborted")]),e._v(" "),n("li",[n("code",[e._v("onavgduration")]),e._v(" - The Execution exceed the average duration of the Job")]),e._v(" "),n("li",[n("code",[e._v("onretryablefailure")]),e._v(" - the Job failed but will be retried")])]),e._v(" "),n("p",[e._v("Rundeck has two built-in notification types that can be configured for Jobs:")]),e._v(" "),n("ol",[n("li",[e._v("Send an email to a list of addresses")]),e._v(" "),n("li",[e._v("POST XML to a list of URLs")])]),e._v(" "),n("p",[e._v("This chapter discusses how to create your own notification plugins.")]),e._v(" "),n("h2",{attrs:{id:"plugin-execution"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#plugin-execution","aria-hidden":"true"}},[e._v("#")]),e._v(" Plugin execution")]),e._v(" "),n("p",[e._v("When a notification is defined for a Job, and the associated trigger occurs, your plugin will be executed\nand passed in two sets of Map data:")]),e._v(" "),n("ol",[n("li",[e._v("Configuration data - the user-supplied configuration for the plugin")]),e._v(" "),n("li",[e._v("Execution data - information about the Job and Execution for the notification")])]),e._v(" "),n("h3",{attrs:{id:"configuration-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuration-data","aria-hidden":"true"}},[e._v("#")]),e._v(" Configuration data")]),e._v(" "),n("p",[e._v("The Configuration data is fully custom depending on your plugin, and is described in the "),n("a",{attrs:{href:"#plugin-configuration-properties"}},[e._v("Plugin configuration properties")]),e._v(" section.")]),e._v(" "),n("h4",{attrs:{id:"property-references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#property-references","aria-hidden":"true"}},[e._v("#")]),e._v(" Property References")]),e._v(" "),n("p",[e._v("The specific data values of the Configuration section are allowed to have\nembedded Property References as described in the\n[Jobs - Context Variables](/manual/job-workflows.md#context-variables] section.")]),e._v(" "),n("p",[e._v("For example, when a user configures your plugin, they could embed an option value using: "),n("code",[e._v("${option.myoption}")]),e._v(". This value will be replaced with the runtime option value before being passed to your plugin.")]),e._v(" "),n("p",[e._v("When defining Configuration properties that use custom Validation, keep in mind\nthat the value set by a user may have such an embedded property reference and\ntherefore may not pass the validation rules you have defined. If you want to\nallow these property references for a Configuration property, it must be a String type property, and any custom validation code should allow the embedded\nproperty references, for example by looking for a '${' sequence and allowing\nthe value.")]),e._v(" "),n("h3",{attrs:{id:"execution-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#execution-data","aria-hidden":"true"}},[e._v("#")]),e._v(" Execution data")]),e._v(" "),n("p",[e._v("The execution data is included as a Map called "),n("code",[e._v("execution")]),e._v("\ncontaining the following keys and values:")]),e._v(" "),n("p",[n("code",[e._v("execution.id")]),e._v(": ID of the execution")]),e._v(" "),n("p",[n("code",[e._v("execution.href")]),e._v(": URL to the execution output view")]),e._v(" "),n("p",[n("code",[e._v("execution.status")]),e._v(": Execution state ('running','failed','aborted','succeeded')")]),e._v(" "),n("p",[n("code",[e._v("execution.user")]),e._v(": User who started the job")]),e._v(" "),n("p",[n("code",[e._v("execution.dateStarted")]),e._v(": Start time (java.util.Date)")]),e._v(" "),n("p",[n("code",[e._v("execution.dateStartedUnixtime")]),e._v(": Start time as milliseconds since epoch (long)")]),e._v(" "),n("p",[n("code",[e._v("execution.dateStartedW3c")]),e._v(": Start time as a W3C formatted String")]),e._v(" "),n("p",[n("code",[e._v("execution.description")]),e._v(": Summary string for the execution")]),e._v(" "),n("p",[n("code",[e._v("execution.argstring")]),e._v(": Argument string for any job options")]),e._v(" "),n("p",[n("code",[e._v("execution.project")]),e._v(": Project name")]),e._v(" "),n("p",[n("code",[e._v("execution.loglevel")]),e._v(": Loglevel string ('ERROR','WARN','INFO','VERBOSE','DEBUG')")]),e._v(" "),n("p",[e._v("The following values may be available after the job is finished (not available for "),n("code",[e._v("onstart")]),e._v(" trigger):")]),e._v(" "),n("p",[n("code",[e._v("execution.failedNodeListString")]),e._v(": Comma-separated list of any nodes that failed, if present")]),e._v(" "),n("p",[n("code",[e._v("execution.failedNodeList")]),e._v(": Java List of any node names that failed, if present")]),e._v(" "),n("p",[n("code",[e._v("execution.succeededNodeListString")]),e._v(": Comma-separated list of any nodes that succeeded, if present")]),e._v(" "),n("p",[n("code",[e._v("execution.succeededNodeList")]),e._v(": Java List of any node names that succeeded, if present")]),e._v(" "),n("p",[n("code",[e._v("execution.nodestatus")]),e._v(": Java Map containing summary counts of node success/failure/total, in the form: "),n("code",[e._v("[succeeded: int, failed: int, total: int]")])]),e._v(" "),n("p",[n("code",[e._v("execution.dateEnded")]),e._v(": End time (java.util.Date)")]),e._v(" "),n("p",[n("code",[e._v("execution.dateEndedUnixtime")]),e._v(": End time as milliseconds since epoch (long)")]),e._v(" "),n("p",[n("code",[e._v("execution.dateEndedW3c")]),e._v(": End time as W3C formatted string")]),e._v(" "),n("p",[n("code",[e._v("execution.abortedby")]),e._v(": User who aborted the execution")]),e._v(" "),n("p",[n("code",[e._v("job")]),e._v(" information is in a "),n("code",[e._v("job")]),e._v(" entry and contains another Map:")]),e._v(" "),n("p",[n("code",[e._v("job.id")]),e._v(": Job ID")]),e._v(" "),n("p",[n("code",[e._v("job.href")]),e._v(": URL to Job view page")]),e._v(" "),n("p",[n("code",[e._v("job.name")]),e._v(": Job name")]),e._v(" "),n("p",[n("code",[e._v("job.group")]),e._v(": Job group")]),e._v(" "),n("p",[n("code",[e._v("job.project")]),e._v(": Project name")]),e._v(" "),n("p",[n("code",[e._v("job.description")]),e._v(": Job Description")]),e._v(" "),n("p",[n("code",[e._v("job.averageDuration")]),e._v(": Average job duration in Milliseconds, if available")]),e._v(" "),n("p",[n("code",[e._v("execution.context")]),e._v(" - this is a map containing all of the context variables available to the execution when it ran or will run, such as [Jobs - Context Variables](/manual/job-workflows.md#context-variables]. The contents of this Map are the specific context namespaces and variables.")]),e._v(" "),n("p",[n("code",[e._v("execution.context.option")]),e._v(": a Map containing the Job Option keys/values.")]),e._v(" "),n("p",[n("code",[e._v("job")]),e._v(": a Map containing the Job context data, as provided to executions. This map will contain some duplicate information as the "),n("code",[e._v("execution.job")]),e._v(" map previously described.")]),e._v(" "),n("p",[e._v("In Groovy, you can simply reference any values in the Execution data maps using\n"),n("a",{attrs:{href:"http://groovy-lang.org/processing-xml.html#_gpath",target:"_blank",rel:"noopener noreferrer"}},[e._v("Groovy Gpath"),n("OutboundLink")],1),e._v(", e.g.:")]),e._v(" "),n("div",{staticClass:"language-{.java} extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("println execution.context.option.myoption\n")])])]),n("h2",{attrs:{id:"plugin-configuration-properties"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#plugin-configuration-properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Plugin configuration properties")]),e._v(" "),n("p",[e._v('Each plugin can define a set of "configuration" properties which allow users to specify input that the plugin can\nuse when it operates.')]),e._v(" "),n("p",[e._v("Notification plugins support scoped properties, allowing some of the configuration to be defined, or defaulted, on a per-project or per-Rundeck instance basis.")]),e._v(" "),n("h2",{attrs:{id:"plugin-types"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#plugin-types","aria-hidden":"true"}},[e._v("#")]),e._v(" Plugin types")]),e._v(" "),n("p",[e._v("Rundeck supports two types of Notification plugins:")]),e._v(" "),n("ol",[n("li",[e._v("Java-based development deployed as a Jar file.")]),e._v(" "),n("li",[e._v("Groovy-based deployed as a single "),n("code",[e._v(".groovy")]),e._v(" script.")])]),e._v(" "),n("p",[e._v('Currently "script-based" plugins (shell scripts, that is) are not supported.')]),e._v(" "),n("h2",{attrs:{id:"example-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-code","aria-hidden":"true"}},[e._v("#")]),e._v(" Example code")]),e._v(" "),n("p",[e._v("See the source directory "),n("code",[e._v("examples/example-groovy-notification-plugins")]),e._v(" for\nexamples of Notification plugins written in Groovy.")]),e._v(" "),n("ul",[n("li",[e._v("On github: "),n("a",{attrs:{href:"https://github.com/rundeck/rundeck/tree/development/examples/example-groovy-notification-plugins",target:"_blank",rel:"noopener noreferrer"}},[e._v("example-groovy-notification-plugins"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("See the source directory "),n("code",[e._v("examples/example-java-notification-plugin")]),e._v(" for\nJava examples.")]),e._v(" "),n("ul",[n("li",[e._v("On github: "),n("a",{attrs:{href:"https://github.com/rundeck/rundeck/tree/development/examples/example-java-notification-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("example-java-notification-plugin"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"java-plugin-type"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-plugin-type","aria-hidden":"true"}},[e._v("#")]),e._v(" Java Plugin Type")]),e._v(" "),n("p",[e._v("Java-based plugins can be developed just as any other Rundeck plugin, as described in the chapter [Plugin Development - Java Plugin Development](/developer/01-plugin-development.md#java-plugin-development].")]),e._v(" "),n("p",[e._v("These plugin classes should implement the interface\n"),n("router-link",{attrs:{to:"/developer/${javadocbase}/com/dtolabs/rundeck/plugins/notification/NotificationPlugin.html"}},[e._v("NotificationPlugin")]),e._v(":")],1),e._v(" "),n("div",{staticClass:"language-{.java} extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public interface NotificationPlugin {\n    /**\n     * Post a notification for the given trigger, dataset, and configuration\n     * @param trigger event type causing notification\n     * @param executionData execution data\n     * @param config notification configuration\n     */\n    public boolean postNotification(String trigger,Map executionData,Map config);\n}\n")])])]),n("p",[e._v("To define configuration properties for your plugin, you use the same mechanisms as for Workflow Steps, described under the chapter [Plugin Development - Plugin Descriptions](/developer/01-plugin-development.md#plugin-descriptions].")]),e._v(" "),n("p",[e._v("The simplest way to do this is to use "),n("router-link",{attrs:{to:"/developer/02-plugin-annotations.html"}},[e._v("Plugin Annotations")]),e._v(". Here is an example class annotated to describe it to the Rundeck GUI:")],1),e._v(" "),n("div",{staticClass:"language-{.java} extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Plugin(service="Notification", name="example")\n@PluginDescription(title="Example Plugin", description="An example Plugin for Rundeck Notifications.")\npublic class ExampleNotificationPlugin implements NotificationPlugin{\n\n    @PluginProperty(name = "test" ,title = "Test String", description = "a description")\n    private String test;\n\n    public boolean postNotification(String trigger, Map executionData, Map config) {\n        System.err.printf("Trigger %s fired for %s, configuration: %s\\n",trigger,executionData,config);\n        System.err.printf("Local field test is: %s\\n",test);\n        return true;\n    }\n}\n')])])]),n("h2",{attrs:{id:"groovy-plugin-type"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#groovy-plugin-type","aria-hidden":"true"}},[e._v("#")]),e._v(" Groovy Plugin Type")]),e._v(" "),n("p",[e._v("Notification support the Groovy Plugin Type.")]),e._v(" "),n("p",[e._v("To define metadata about your plugin, and configuration properties, see the [Plugin Development - Groovy Plugin Development](/developer/01-plugin-development.md#groovy-plugin-development] chapter.")]),e._v(" "),n("p",[e._v("To create a Groovy based plugin, create a file named "),n("code",[e._v("MyNotificationPlugin.groovy")]),e._v(" in the plugins directory for Rundeck.")]),e._v(" "),n("p",[e._v("You must restart rundeck to make the plugin available the first time, but you can subsequently update the .groovy script without restarting Rundeck.")]),e._v(" "),n("p",[n("router-link",{attrs:{to:"/developer/01-plugin-development.html#groovy-plugin-development"}},[e._v("Groovy Plugin Development")])],1),e._v(" "),n("h3",{attrs:{id:"groovy-dsl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#groovy-dsl","aria-hidden":"true"}},[e._v("#")]),e._v(" Groovy DSL")]),e._v(" "),n("p",[e._v("Within the Groovy script, you define your plugin by calling the "),n("code",[e._v("rundeckPlugin")]),e._v(" method, and pass it both the Class of the type of plugin, and a Closure used to build the plugin object.")]),e._v(" "),n("div",{staticClass:"language-{.java} extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import  com.dtolabs.rundeck.plugins.notification.NotificationPlugin\nrundeckPlugin(NotificationPlugin){\n    //plugin definition goes here...\n}\n")])])]),n("p",[e._v("In this case we use the same "),n("code",[e._v("NotificationPlugin")]),e._v(" interface used for Java plugins.")]),e._v(" "),n("h3",{attrs:{id:"notification-handlers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notification-handlers","aria-hidden":"true"}},[e._v("#")]),e._v(" Notification handlers")]),e._v(" "),n("p",[e._v("For a "),n("code",[e._v("NotificationPlugin")]),e._v(", you can define custom handlers for each of the notification triggers ("),n("code",[e._v("onsuccess")]),e._v(", "),n("code",[e._v("onfailure")]),e._v(", "),n("code",[e._v("onstart")]),e._v(", "),n("code",[e._v("onavgduration")]),e._v(", and "),n("code",[e._v("onretryablefailure")]),e._v(").")]),e._v(" "),n("p",[e._v("Simply define a closure with the given trigger name, and return a true value if your action was successful:")]),e._v(" "),n("div",{staticClass:"language-{.java} extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('onstart{ Map execution, Map configuration ->\n    //perform an action using the execution and configuration\n    println "Job ${execution.job.name} has been started by ${execution.user}..."\n    return true\n}\nonsuccess{ Map execution, Map configuration ->\n    //perform an action using the execution and configuration\n    println "Success! Job ${execution.job.name} worked fine."\n    return true\n}\nonfailure{ Map execution, Map configuration ->\n    //perform an action using the execution and configuration\n    println "Oh No! Job ${execution.job.name} didn\'t work out."\n    return true\n}\nonavgduration{ Map execution, Map configuration ->\n    //perform an action using the execution and configuration\n    println "Job ${execution.job.name} exceeded Average Duration!"\n    return true\n}\nonretryablefailure{ Map execution, Map configuration ->\n    //perform an action using the execution and configuration\n    println "Job ${execution.job.name} failed but will be retried."\n    return true\n}\n')])])]),n("p",[e._v("If your closure returns a "),n("code",[e._v("false")]),e._v(" value, then Rundeck will log an error in the server log.")]),e._v(" "),n("h3",{attrs:{id:"example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("Here is a minimal example:")]),e._v(" "),n("p",[n("strong",[e._v("MinimalNotificationPlugin.groovy")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language-{.java} extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import com.dtolabs.rundeck.plugins.notification.NotificationPlugin;\n\nrundeckPlugin(NotificationPlugin){\n    onstart {\n        println("job start: data ${execution}")\n        true\n    }\n\n    onfailure {\n        println("failure: data ${execution}")\n        true\n    }\n\n    onsuccess {\n        println("success: data ${execution}")\n        true\n    }\n    onavgduration{\n        println("exceeded average duration: data ${execution}")\n        true\n    }\n    onretryablefailure{\n        println("retryable failure: data ${execution}")\n        true\n    }\n}\n')])])]),n("p",[e._v("Here is a full example showing plugin GUI metadata, configuration properties, and\nalternate closure parameter lists:")]),e._v(" "),n("p",[n("strong",[e._v("MyNotificationPlugin.groovy")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language-{.java} extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import com.dtolabs.rundeck.plugins.notification.NotificationPlugin;\n\nrundeckPlugin(NotificationPlugin) {\n    title="Example Plugin"\n    description="An example"\n\n    configuration{\n\n        test1 title:"Test1", description:"Simple string"\n\n        //Validation can be added with a closure\n        test2(title:\'Test2\',description:"Matches a regex"){\n            it=~/^\\d+$/\n        }\n\n        //required select value, becomes a Select type\n        test3 values: ["a","b","c"], required:true\n\n        //if not required, becomes a FreeSelect\n        test4 values: ["a","b","c"]\n\n        //If type is not specified, the defaultValue will be used to guess\n        test5 defaultValue: 3 //becomes Integer type\n        test6 defaultValue:true //becomes Boolean type\n\n        //these properties are assigned default values and automatically typed\n        test7=123\n        test8="abc"\n        test9=true\n        test10=false\n        test11=["x","y","z"] //becomes a FreeSelect\n\n        //redefining the same property will modify it\n        test11 title:"My Select Field", description:"Free Select field", defaultValue:"y", required:true\n\n        //the scope indicates the property will not show up in the GUI when configuring the Notification, but must be defined in the project.properties or framework.properties at runtime\n        test11 required:true, scope: \'Project\'\n\n    }\n\n    onstart { Map executionData,Map config ->\n        println("script, start: data ${executionData}, config: ${config}")\n        true\n    }\n\n    onfailure { Map executionData ->\n        //Single argument, the configuration properties are available automatically\n        println("script, failure: data ${executionData}, test1: ${test1}, test2: ${test2} test3: ${test3}")\n        true\n    }\n\n    onsuccess {\n        //with no args, there is a "configuration" and an "execution" variable in the context\n        println("script, success: data ${execution}, test1: ${configuration.test1}, test2: ${configuration.test2} test3: ${configuration.test3}")\n        true\n    }\n\n    onavgduration { Map executionData,Map config ->\n        println("script, exceeded average duration: data ${executionData}, config: ${config}")\n        true\n    }\n\n    onretryablefailure { Map executionData,Map config ->\n        println("script, retryable failure: data ${executionData}, config: ${config}")\n        true\n    }\n}\n\n')])])])])},[],!1,null,null,null);t.default=i.exports}}]);